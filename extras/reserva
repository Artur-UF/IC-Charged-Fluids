double con, c0, c1, c2, desv_r, desv_v, cvv, cvv2, dt2, xold, yold, zold;

for (double t = 0; t <= TF; t += DT){
		// Cálculo inicial das forças
		forcas(todas, n, lx, ly, lz);
		
		// Loop do espaço sobre todas as partículas
		for (int j = 0; j < n; ++j){
			xold = todas[j].p[0];
			yold = todas[j].p[1];
			zold = todas[j].p[2];
			todas[j].gaussian[0] = gausran();
			todas[j].gaussian[1] = gausran();
			todas[j].gaussian[2] = gausran();
			
			// Passo no espaço
			todas[j].p[0] += c1 * DT * todas[j].v[0] + c2 * dt2 * todas[j].f[0] + todas[j].gaussian[0] * desv_r;
			todas[j].p[1] += c1 * DT * todas[j].v[1] + c2 * dt2 * todas[j].f[1] + todas[j].gaussian[1] * desv_r;
			todas[j].p[2] += c1 * DT * todas[j].v[2] + c2 * dt2 * todas[j].f[2] + todas[j].gaussian[2] * desv_r;
			
			// PBC
			if (fabs(todas[j].p[0]) > lx/2.){
				todas[j].p[0] -= lx * (fabs(todas[j].p[0])/todas[j].p[0]);
			}
			if (fabs(todas[j].p[1]) > ly/2.){
				todas[j].p[1] -= ly * (fabs(todas[j].p[1])/todas[j].p[1]);
			}
			if (fabs(todas[j].p[2]) > lz/2.){
				todas[j].p[2] -= lz * (fabs(todas[j].p[2])/todas[j].p[2]);
			}
		}
		// Cálculo final das forças
		forcas(todas, n, lx, ly, lz);
		
		// Loop da velocidade sobre todas partículas
		for (int j = 0; j < n; ++j){
			// Vx
			todas[j].v[0] = c0 * todas[j].v[0] + (c1 - c2) * DT * todas[j].f[0] + 
			c2 * DT * todas[j].f[0] + desv_v * (cvv * todas[j].gaussian[0] + cvv2 * gausran());
			// Vy
			todas[j].v[1] = c0 * todas[j].v[1] + (c1 - c2) * DT * todas[j].f[1] + 
			c2 * DT * todas[j].f[1] + desv_v * (cvv * todas[j].gaussian[1] + cvv2 * gausran());
			// Vz
			todas[j].v[2] = c0 * todas[j].v[2] + (c1 - c2) * DT * todas[j].f[2] + 
			c2 * DT * todas[j].f[2] + desv_v * (cvv * todas[j].gaussian[2] + cvv2 * gausran());
		}
}


	//Loop Temporal
	double *c, con;
	c = (double *) malloc(9 * sizeof(double));
	
	con = FRIC*DT; 
	c[0] = exp(-con);															// c0
	c[1] = (1-c[0])/con;														// c1
	c[2] = (1-c[1])/con;														// c2
	c[3] = DT*sqrt((1/con) * (2 - ((1/con) * (3 - (4*c[0]) + (c[0]*c[0])))));   // desv_r
	c[4] = sqrt(1-(c[0]*c[0]));													// desv_v
	c[5] = (DT/con/c[4]/c[3]) * (1-c[0])*(1-c[0]);								// cvv
	c[6] = sqrt(1 - (c[5]*c[5]));												// cvv2
	c[7] = DT * DT;																// dt2
	c[8] = DT;																	// dt
